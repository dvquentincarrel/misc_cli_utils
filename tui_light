#!/bin/python
import curses
import subprocess

class DisplaysHandler:
    """ Handles all display value modification """
    def __init__(self):
        self.displays = self.get_brightness()
        self.selected = 0
        self.nb_screens = len(self.displays)
        self.STEP = 0.02

    def get_brightness(self):
        """ Returns, as a list of lists, each screen's brightness """
        args = ['xrandr', '--verbose', '--query']
        xrandr = subprocess.run(args, capture_output=True, text=True)
        args = ['grep', '-Pi', '\\bconnected\\b|brightness']
        grep = subprocess.run(args, capture_output=True, text=True, input=xrandr.stdout)
        lines = grep.stdout.splitlines()

        infos = []
        for index in range(0, len(lines), 2):
            line = []
            screen = lines[index]
            line.append(screen.partition(' ')[0])
            brightness = lines[index+1]
            line.append(brightness.partition(' ')[2])
            infos.append(line)
        return infos

    def interpret_input(self, input):
        match input:
            case 258: # Down
                self.selected = (self.selected + 1) % self.nb_screens
            case 259: # Up
                self.selected = (self.selected - 1) % self.nb_screens
            case 260: # Left
                self.change_brightness(-1)
            case 261: # Right
                self.change_brightness(1)
            case 555 | 549: # Ctrl-Left
                self.change_brightness(-5)
            case 570 | 564: # Ctrl-Right
                self.change_brightness(5)
            case 113: # q
                raise KeyboardInterrupt

    def change_brightness(self, modifier):
        screen = self.displays[self.selected]
        brightness = screen[1] = round(float(screen[1]) + self.STEP * modifier, 2)
        args = ["xrandr", "--output", str(screen[0]), "--brightness", str(brightness)]
        process = subprocess.run(args)
    
    def get_screen_infos(self):
        return "{0}    {1:.2f}".format(self.displays[self.selected][0], float(self.displays[self.selected][1]))

def main(stdscr):
    curses.curs_set(0)
    stdscr.clear()
    handler = DisplaysHandler()
    while(True):
        infos = handler.get_screen_infos()
        stdscr.addstr(curses.LINES//2, (curses.COLS-len(infos))//2, infos)
        input = stdscr.getch()
        stdscr.erase()
        stdscr.refresh()
        handler.interpret_input(input)
try:
    curses.wrapper(main)
except KeyboardInterrupt:
    exit(0)
